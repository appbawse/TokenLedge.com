CREATE TABLE User (
    id INT(11) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(255) NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    salt VARCHAR(255) NOT NULL,
    public_key TEXT NOT NULL
);

CREATE TABLE Address (
    id INT(11) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    user_id INT(11) UNSIGNED NOT NULL,
    address VARCHAR(255) NOT NULL,
    FOREIGN KEY (user_id) REFERENCES User(id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Transaction (
    id INT(11) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    from_address_id INT(11) UNSIGNED NOT NULL,
    to_address_id INT(11) UNSIGNED NOT NULL,
    amount DECIMAL(18,8) NOT NULL,
    timestamp TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    hash TEXT NOT NULL,
    FOREIGN KEY (from_address_id) REFERENCES Address(id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (to_address_id) REFERENCES Address(id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Block (
    id INT(11) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    version INT(11) NOT NULL,
    timestamp TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    previous_hash TEXT NOT NULL,
    merkle_root TEXT NOT NULL,
    hash TEXT NOT NULL
);

CREATE TABLE BlockTransaction (
    id INT(11) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    block_id INT(11) UNSIGNED NOT NULL,
    transaction_id INT(11) UNSIGNED NOT NULL,
    FOREIGN KEY (block_id) REFERENCES Block(id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (transaction_id) REFERENCES Transaction(id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE MerkleTree (
    id INT(11) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    sharding_id INT(11) UNSIGNED NOT NULL,
    root_hash TEXT NOT NULL,
    FOREIGN KEY (sharding_id) REFERENCES Sharding(id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE MerkleTreeHash (
    id INT(11) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    merkle_tree_id INT(11) UNSIGNED NOT NULL,
    index_in_tree INT(11) NOT NULL,
    hash TEXT NOT NULL,
    FOREIGN KEY (merkle_tree_id) REFERENCES MerkleTree(id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE MerkleTreeProofItem (
    id INT(11) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    merkle_tree_proof_id INT(11) UNSIGNED NOT NULL,
    index_in_proof INT(11) NOT NULL,
    is_right TINYINT(1) NOT NULL,
    hash TEXT NOT NULL,
    FOREIGN KEY (merkle_tree_proof_id) REFERENCES MerkleTreeProof(id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE MerkleTreeProof (
    id INT(11) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    merkle_tree_id INT(11) UNSIGNED NOT NULL,
    merkle_tree_hash_id INT(11) UNSIGNED NOT NULL,
    merkle_tree_proof_item_id INT(11) UNSIGNED NOT NULL,
    FOREIGN KEY (merkle_tree_id) REFERENCES MerkleTree(id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (merkle_tree_hash_id) REFERENCES MerkleTreeHash(id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (merkle_tree_proof_item_id) REFERENCES MerkleTreeProofItem(id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Balance (
    id INT(11) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    user_id INT(11) UNSIGNED NOT NULL,
    token_id INT(11) UNSIGNED NOT NULL,
    balance DECIMAL(18,8) NOT NULL,
    merkle_tree_id INT(11) UNSIGNED NOT NULL,
    FOREIGN KEY (user_id) REFERENCES User(id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (merkle_tree_id) REFERENCES MerkleTree(id) ON DELETE CASCADE ON UPDATE CASCADE
);
